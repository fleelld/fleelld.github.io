{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"","slug":"cppt总结","date":"2021-05-03T13:40:34.462Z","updated":"2021-05-05T11:22:41.922Z","comments":true,"path":"2021/05/03/cppt总结/","link":"","permalink":"http://example.com/2021/05/03/cppt%E6%80%BB%E7%BB%93/","excerpt":"","text":"计算机基础知识计算机系统 冯•诺依曼存储程序工作原理 五大功能部件：运算器、存储器、控制器、输入设备和输出设备 工作原理：（1）采用二进制表示数据和指令（2）采用存储程序控制 数制，基数，位权 数制：n进制 基数：数码的个数（如十进制，其数码有10个：0、1、2、3、4、5、6、7、8、9） 位权：以基数为底、数码所在位置的序号为指数的整数次幂（十进制整数1234，第0位的位权位10的0次方） 进制之间的转化 X进制转化成十进制：按权展开法an …a1a0 (X) = anXn + …+ a1X1 + a0X0 十进制转化成X进制整数部分 除以X逆序取余数，直到商为0，小数部分乘X顺序取整法。 二进制转八进制 从低位向高位(从右向左)每三位分一组每组用一位八进数表示，不足三位以零补足三位例 1 101 101 110(B)= 1556(O)1 5 5 6 二进制转十六进制 从低位向高位(从右向左)每四位分一组每组用一位十六进制数表示，不足四位以零补足四位。 例 11 0110 1110(B)=36E(H) 3 6 E 八进制转二进制: 每一位八进制数用三位二进制数表示。例: 7123(O)=111 001 010 011(B) 7 1 2 3 十六进制转二进制:每一位十六进制数用四位二进制数表示。例: 2C1D(H)=0010 1100 0001 1101(B) 2 C 1 D (实在是忘记了怎么转化时可以先化为十进制) 数据的储存 存储容量：描述计算机存储能力的指标。 机器码：一个数及其符号在机器中的表示(用二、八、十六进制表示) 真值: 机器码所代表的实际值。(用十进制数表示) 有符号整数的储存（1）原码原码就是用最高位表示数的正、负号，0表示非负，1表示负，而数值部分用最高位以后的若干位来表示（2）反码原码变反码的规则为：正数的反码与原码相同；负数的反码是将它的原码除符号位外逐位取反。（3）补码补码的取码原则是：正数的补码和其原码相同；负数的补码是它的原码除符号位外逐位取反（即0变1，1变0），最后在末位加1正数：机器码0000H7fffH,对应的真值032767(2^15-1)负数：机器码ffffH8000H,对应的真值-1-32768 整数是按照其补码来进行储存的 无符号整数的存储（假定一个整数占两个字节）16位全部都是数据位存储范围：机器码0000HffffH,对应的真值 065535（2^16-1） 顺序结构-从计算机向外部输出设备(如显示屏、打印机、磁盘等)输出数据称为“输出” ;从外部向输入设备(如键盘、磁盘、光盘、扫描仪等)输入数据称为“输入”。 %e以指数形式输出浮点型数据例如： float m=123.4567891;printf(“%e”,m);其输出结果为:1.23457e+02(四舍五入) %g 以%e,%f中输出占较少位的形式输出浮点型数据（很少用）例如： float a=567.789;printf(“%g”,a);(%g根据结果自动选择科学记数法还是一般的小数记数法，对于指数小于-4或者大于给定精度的数值，按照%e的控制输出，否则按照%f的控制输出) 输出%:%% printf常用的格式修饰符 scanf常用的格式修饰符 scanf的注意事项： 1.输入多个单字符时，字符中间不能有空格2.格式控制字符串中无任何普通字符，如： scanf(“%d%d%d”, &amp;a, &amp;b, &amp;c); 这时输入数据之间用空格(或Tab、回车)分开： 34 58 1006、格式控制字符串中无任何普通字符，且相邻的两个格式控制字符并且后一个是%C时，中间不能加任何分隔符例如 scanf(“%d%c%d%c%f”,&amp;a,&amp;c1,&amp;b,&amp;c2,&amp;x) 1a2b3.4 选择结构注意 注意区分：a==3与3==a（建议用，便于找错误） 应避免对实数作相等或不等的判断 如 1.0/3.03.0==1.0可改写为：fabs(1.0/3.03.0-1.0)&lt;1e-6 要注意到短路后后面将不会被执行 else始终与它上面的最近的if语句配对，而这个if语句又没有其它的else与之匹配 为了强制匹配，可以增加{}或书写所有的else 表达式练习 判断整数x是否为偶数或奇数x%2==0 x%2 != 0 (x%2) 能被3整除但不能被5整除的数x%3==0 &amp;&amp; x%5 判断一个字符是否为字母(‘A’&lt;=ch &amp;&amp; ch&lt;= ‘Z’)||(‘a’&lt;=ch &amp;&amp; ch&lt;= ‘z’) 判断一个字符是否为空格字符ch==”” year%4==0&amp;&amp;year%100!=0||year%400==0可以等价于!(year%4)&amp;&amp;year%100||!(year%400) 冒泡排序expr1?expr2:expr3 执行过程：先求解表达式1的值，如果表达式1的值为非0(真)，则求解表达式2的值，且整个条件表达式的值为表达式2的值；否则，求解表达式3的值，且整个条件表达式的值为表达式3的值。 优先级: 13 高于赋值运算符 结合性：自右向左 表达式2与表达式3的类型也可以不一致,此时条件表达式的值自动向类型较高的转换 switch case注意事项 case后面必须接的是常量表达式 case后面的语句不需要用{}括起来 执行步骤:计算switch语句表达式的值,依次与1—n个常量做比较，当表达式的值与常量相等时，执行case后的语句遇break结束switch语句,如无匹配的case值时，则执行default相应语句 案例 123456789101112131415161718192021222324252627#include &lt;stdio.h&gt;void main()&#123; int score; printf(&quot;请输入学生的成绩:&quot;); scanf(&quot;%d&quot;,&amp;score); if(score&lt;0||score&gt;100) printf(&quot;the score is err&quot;); else switch((int)(score/10)) &#123; case 10: case 9: printf(&quot;the grade is A&quot;); break; case 8: printf(&quot;the grade is B&quot;); break; case 7: printf(&quot;the grade is C&quot;); break; case 6: printf(&quot;the grade is D&quot;); break; default:printf(&quot;the grade is E&quot;); &#125;&#125;","categories":[],"tags":[]},{"title":"","slug":"cppt总结2","date":"2021-05-03T11:53:40.834Z","updated":"2021-05-03T11:54:44.454Z","comments":true,"path":"2021/05/03/cppt总结2/","link":"","permalink":"http://example.com/2021/05/03/cppt%E6%80%BB%E7%BB%932/","excerpt":"","text":"指针 int p1, *p2; 与int *p1, p2;每个指针变量前都要有; 指针变量名是p1,p2 ,不是*p1,*p2; 指针变量只能指向定义时所规定类型的变量; 指针变量定义后，其值不确定，应用前必须先赋值，指针变量的赋值相当于是指向关系的建立; i_pointer—–指针变量，它的内容是地址量; *i_pointer—-指针的目标变量，它的内容是数据; &amp;i_pointer—指针变量占用内存的地址; 指针变量做函数参数，形参是指针变量，实参是变量的地址或指向变量的指针变量，发生函数调用时进行单向地址传递，形参的改变不会影响实参。 在被调函数中可以通过改变形参指针所指向的变量来改变实参指针所指向变量的值（在被调函数中采取间接访问的方式访问主调函数中的变量）。 主调函数中的变量的改变是在函数调用过程中实现的，可以把主调函数中的被改变的变量看作是函数的多个返回值。 得到多个返回值","categories":[],"tags":[]},{"title":"","slug":"cppt总结1","date":"2021-04-18T11:22:54.015Z","updated":"2021-05-04T05:13:36.157Z","comments":true,"path":"2021/04/18/cppt总结1/","link":"","permalink":"http://example.com/2021/04/18/cppt%E6%80%BB%E7%BB%931/","excerpt":"","text":"c循环求两个数的最大公约数 方法：使用辗转相除法 1234567891011121314 #include &lt;stdio.h&gt;void main()&#123; int r,m,n,t; printf(&quot;请输入两个整数&quot;); scanf(&quot;%d,%d&quot;,&amp;m,&amp;n); if(n&gt;m) &#123;t=m;m=n;n=t;&#125; do&#123; r=m%n; m=n; n=r; &#125;while(r!=0); printf(&quot;这两个数的最大公因为%d&quot;,m);&#125; 易错点 12345678910111213141516171819202122232425262728293031 #include &lt;stdio.h&gt;void main()&#123; int month,x; float y,year; printf(&quot;请输入存款金额:&quot;); scanf(&quot;%d&quot;,&amp;x); printf(&quot;请输入存期:&quot;); scanf(&quot;%d&quot;,&amp;month); year=month/12.0; switch(month)&#123; case 3: y=x*0.026*year; break; case 6: y=x*0.028*year; break; case 12: y=x*0.03*year; break; case 24: y=x*0.0375*year; break; case 36: y=x*0.0425*year; break; case 60: y=x*0.0475*year; break; &#125; printf(&quot;利息为：%f&quot;,y);&#125; 12345678910#include &lt;stdio.h&gt;void main()&#123; float r,s,v; printf(&quot;请输入r的值&quot;); scanf(&quot;%f&quot;,&amp;r); s=3.1415926*4*r*r; v=4.0/3.0*3.1415926*r*r*r; printf(&quot;球的表面积为%f\\n&quot;,s); printf(&quot;球的体积为%f\\n&quot;,v);&#125; 这些数据类型的问题，一般的整形除以整形的分式里，直接将得到的小数部分去掉。所以要想得到小数必须浮点数相除。 循环语句的选择 如果循环次数是已知的，一般选用for语句。 如果循环次数是未知的，可选用while语句。 如果希望不管循环条件是否成立，都希望循体最少执行一次，则要选用do-while语句。 判断某个一位数是否在另外一个整数中出现123456789101112131415161718#include &lt;stdio.h&gt;//1代表这在，0代表着不在void main()&#123; int m,n;//n是否在m这个数里出现 int flag=0; printf(&quot;请输入两个整数\\n&quot;); scanf(&quot;%D,%d&quot;,&amp;m,&amp;n); while(m!=0)&#123; if(n==m%10)&#123; flag=1; break; &#125; else m=m/10; &#125; if(flag==1) printf(&quot;yes\\n&quot;); if(flag==0) printf(&quot;no\\n&quot;);&#125; 输入十个数，求其中的正数的个数及其平均值1234567891011121314#include &lt;stdio.h&gt;void main()&#123; int i,num=0,sum=0,m; float av; for(i=1;i&lt;=10;i++)&#123; scanf(&quot;%d&quot;,&amp;m); if(m&gt;0)&#123; num++; sum+=m; &#125; &#125; av=sum/num; printf(&quot;%d,%f&quot;,num,av);&#125; 九九乘法表12345678910#include &lt;stdio.h&gt;void main()&#123; int i,j; for(i=1;i&lt;=9;i++)&#123; for(j=1;j&lt;=i;j++)&#123; printf(&quot;%d*%d=%-4d&quot;,j,i,j*i); &#125; printf(&quot;\\n&quot;); &#125;&#125; 百元买百鸡 方法:使用穷举法（对问题的所有可能状况一一测试，直到找到解或将全部可能状况都测诗过为止） 12345678910111213#include &lt;stdio.h&gt;void main()&#123; int x,y,z; for(x=0;x&lt;=19;x++)&#123; for(y=0;y&lt;=33;y++)&#123; z=100-x-y; if(z%3!=0||z&lt;0) continue; if(5*x+3*y+z/3==100) printf(&quot;公鸡的个数为%d,母鸡的个数为%d,小鸡的个数为%d\\n&quot;,x,y,z); &#125; &#125;&#125; 12345678910111213#include &lt;stdio.h&gt;void main()&#123; int x,y,z; for(x=0;x&lt;=19;x++)&#123; for(y=0;y&lt;=33;y++)&#123; z=100-x-y; if(z%3!=0||z&lt;0) continue; if(5*x+3*y+z/3==100) printf(&quot;公鸡的个数为%d,母鸡的个数为%d,小鸡的个数为%d\\n&quot;,x,y,z); &#125; &#125;&#125; 输出所有两位素数。要求：一行输出15个素数 判断素数 12345678910111213#include &lt;stdio.h&gt;void main()&#123; int i,j,flag=1; printf(&quot;请输入一个数&quot;); scanf(&quot;%d&quot;,&amp;i); for(j=2;j&lt;i;j++)&#123; if(i%j==0) &#123;flag=0;break;&#125; &#125; if(flag==1) printf(&quot;%d is a sushu&quot;,i); else printf(&quot;%d is not a sushu&quot;,i);&#125; 123456789101112131415#include &lt;stdio.h&gt;#include &lt;math.h&gt;void main()&#123; int i,j,flag=1,t; printf(&quot;请输入一个数&quot;); scanf(&quot;%d&quot;,&amp;i); t=sqrt(float(i)); for(j=2;j&lt;=t;j++)&#123; if(i%j==0) &#123;flag=0;break;&#125; &#125; if(flag==1) printf(&quot;%d is a sushu\\n&quot;,i); else printf(&quot;%d is not a sushu\\n&quot;,i);&#125; 注意事项：在math.h中“sqrt”有三种类型：long double sqrt (long double);double sqrt(double);float sqrt(float); 素数的判断1：设数m为素数，如果存在m%i(i=2 ~ m-1)==0 则该数不是素数； 素数的判断2：数学中已证明的，设数m为素数，i&lt;=sqrt(m)或者i&lt;=m/2； 输出所有素数 12345678910111213141516#include &lt;stdio.h&gt;void main()&#123; int i,count=0,j,f; for(i=10;i&lt;100;i++)&#123; f=1; for(j=2;j&lt;i;j++)&#123; if(i%j==0) &#123;f=0;break;&#125; &#125; if(f==1) &#123;printf(&quot;%5d&quot;,i);count++;&#125; if(count==15) printf(&quot;\\n&quot;); &#125;&#125;//为什么f=1必须要放到for 循环里呢 递推题型迭代法：迭代是一个不断用新值取代变量的旧值，或由旧值递推出变量的新值的过程。 1234567891011121314151617# include &lt;stdio.h&gt;void main ()&#123; int a=1,b=1,num=2,c,i,sum=2; printf(&quot;%-5d%-5d&quot;,a,b); for (i=3;i&lt;=20;i++)&#123; c=a+b; a=b; b=c; sum+=c; printf(&quot;%-5d&quot;,c); num++; if(num%4==0) printf(&quot;\\n&quot;); &#125; printf(&quot;%d&quot;,sum);&#125;//输出斐波纳契（Fibonacci）级数1，1，2，3，5，8，13，… 的前20项并输出前20项。 求前n项的和 123456789101112131415#include &lt;stdio.h&gt;void main()&#123; int i ,n ,j ; scanf(&quot;%d,%d&quot;,&amp;i,&amp;n); int sum=i,t=i; for(j=1;j&lt;=n;j++) &#123; i=10*i+t; sum+=i; printf(&quot;%d+&quot;,i); &#125; printf(&quot;\\n&quot;); printf(&quot;=%d&quot;,sum);&#125; 123456789101112131415#include &lt;stdio.h&gt;#include &lt;math.h&gt;void main()&#123; int i,j ,s=1,n; scanf(&quot;%d,%d&quot;,&amp;i,&amp;n); int sum=i,t=i; for(j=1;j&lt;=n;j++) &#123; s=-s; i=s*(10*abs(i)+t); sum+=i; &#125; printf(&quot;%d&quot;,sum);&#125; 1234567891011#include &lt;stdio.h&gt;void main()&#123; long int s=0,t; int a,n,i; scanf(&quot;%d%d&quot;,&amp;a,&amp;n); t=a; for(i=1;i&lt;=n;i++) &#123; s+=t; t=t*10+a; &#125; printf(&quot;s=%ld\\n&quot;,s); 1234567891011121314#include &lt;stdio.h&gt;void main()&#123; float s=0,t; int a=2,b=1,i,m; for(i=1;i&lt;=20;i++) &#123; t=(float)a/b; s+=t; m=b; b=a; a=a+m; &#125; printf(&quot;s=%.2f&quot;,s);&#125;//有一个分数序列2/1，3/2，5/3，8/5…求该数列前20项的和 12345678910111213141516#include &lt;stdio.h&gt;void main()&#123; int a=2,b=1,t,i; float c,sum=a/b; for(i=1;i&lt;20;i++) &#123; t=a; a=a+b; b=t; c=float(a/b); sum+=c; &#125; printf(&quot;%.2f&quot;,sum);&#125;//有一个分数序列2/1，3/2，5/3，8/5…求该数列前20项的和 ex1234567891011121314151617# include &lt;stdio.h&gt;void main()&#123; float x,an=1,ex=1; int fac=1,i=1; printf(&quot;请输入一个整数&quot;); scanf(&quot;%f&quot;,&amp;x); while(an/fac&gt;1e-6) &#123; fac*=i; an*=x; ex+=an/fac; i++; &#125; printf(&quot;e%f=%f&quot;,x,ex);&#125;//求ex=1+x+x2/2!+x3/3!+x4/4!+…… sin(x)cos(x)12345678910111213141516171819#include &lt;stdio.h&gt;#include &lt;math.h&gt;void main()&#123; double x,cosx=1,xn=1; int n=2,fac=1,s=1; printf(&quot;please input a number&quot;); scanf(&quot;%lf&quot;,&amp;x); do &#123; xn*=x*x; fac*=n*(n-1); s=-s; cosx+=s*(xn/fac); n+=2; &#125;while(fabs(xn/fac)&gt;1.0e-5); printf(&quot;cos(%lf)=%lf\\n&quot;,x,cosx); printf(&quot;%lf&quot;,cos(x));&#125;//do while 循环不要忘了最后面还有个&quot;;&quot; 总结 %(10的倍数)的作用：得到一个整数后几位的数 /(10的倍数)的作用：得到前几位的数 %10，/(10的倍数)的综合作用：得到第几位的数 函数注意点 函数类型与return语句中表达式的值数据类型不一致时，以函数类型为主。执行return时，c语言编译系统会自动将return(表达式) 中的表达式的类型转换为函数类型； 利用return语句，每次最多得到一个返回值； c中字符用单引号，不用双引号； 小写字母变大写字母123456789101112131415#include &lt;stdio.h&gt;char fun(char c1)&#123; char c2; if(c1&gt;=&#x27;a&#x27;&amp;&amp;c1&lt;=&#x27;z&#x27;) c2=c1-32; else c2=c1; return c2;&#125;void main()&#123; char c; printf(&quot;请输入一个字母&quot;); scanf(&quot;%c&quot;,&amp;c); c=fun(c); printf(&quot;%c\\n&quot;,c);&#125; 无值函数1234567891011#include &lt;stdio.h&gt;void f()&#123; int k; for(k=0;k&lt;10;k++) printf(&quot;\\007&quot;);//&quot;\\007&quot;代表着响铃&#125;void main()&#123;f();&#125; 实参和形参 实参求值顺序：自右向左。 形参得到值的顺序：自左向右。 交换两个数的值12345678910111213#include &quot;stdio.h&quot;void main()&#123; int a,b; void swap(int,int); scanf(&quot;%d,%d&quot;,&amp;a,&amp;b); printf(&quot;a=%d,b=%d\\n&quot;,a,b); swap(a,b); printf(&quot;a=%d,b=%d\\n&quot;,a,b);&#125;void swap(int x,int y)&#123; int t; printf(&quot;x=%d,y=%d\\n&quot;,x,y); t=x;x=y;y=t; printf(&quot;x=%d,y=%d\\n&quot;,x,y); return;&#125; 1234567891011121314#include &lt;stdio.h&gt;void fun(int,int);void main()&#123; int a,b; printf(&quot;请输入两个数的值&quot;); scanf(&quot;%d,%d&quot;,&amp;a,&amp;b); fun(a,b);&#125;void fun(int a,int b)&#123; int t; printf(&quot;%d,%d\\n&quot;,a,b); t=a;a=b;b=t; printf(&quot;%d,%d\\n&quot;,a,b);&#125; 结果为：由此可推出被调函数调用完后会释放 函数调用中应注意的问题 实参与形参个数相等，类型一致，按顺序一一对应。 一个函数只能有一个返回值 函数调用不能改变实参的值 函数中变量起作用的范围只限本函数（局部变量） 不同函数内的变量可以同名 实参可以是任意能够表示确定值的量，但形参必须是变量。 实参和形参占用不同的内存单元，即使同名也互不影响。 求三个数的最大值12345678910111213141516171819202122232425262728293031323334353637383940#include &lt;stdio.h&gt;int max(int a,int b)&#123; int c; c=a&gt;b?a:b; /*int t; t=a&gt;b?a:b; t=t&gt;c?t:c; return t; */ return c;&#125;void main()&#123; int a,b,c,d; printf(&quot;请输入三个整数&quot;); scanf(&quot;%d,%d,%d&quot;,&amp;a,&amp;b,&amp;c); d=max(max(a,b),c); printf(&quot;%d\\n&quot;,d); &#125;### 用函数输出素数```c#include &lt;stdio.h&gt;#include&lt;math.h&gt;int su(int);void main()&#123; int s; for(s=101;s&lt;200;s+=2) if(su(s)) printf(&quot;%d\\n&quot;,s);&#125;int su(int a)&#123; int f=1,i,t; t=sqrt(float(a)); for(i=2;i&lt;=t;i++)&#123; if(a%i==0) &#123;f=0;break;&#125; &#125; return f;&#125;//偶数肯定不是素数 函数的嵌套调用 语言不允许嵌套定义函数，但可以嵌套调用函数，即在调用一个函数的时候调用另一个函数。 函数的递归调用是指一个函数在它的函数体内，直接或间接地调用它自身。即函数自己调用自己。（函数递归调用是有条件的，递归边界条件） 非递归调用 用递归法求n的阶乘123456789101112131415161718# include &lt;stdio.h&gt;int fac(int n);void main()&#123; int n,t; printf(&quot;input a number\\n&quot;); scanf(&quot;%d&quot;,&amp;n); t=fac(n); printf(&quot;%d&quot;,t);&#125;int fac(int n)&#123; int m; if(n==1) m=1; else m=n*fac(n-1); return m;&#125; 求最大公约数和最小公倍数12345678910111213141516171819202122232425262728293031323334# include &lt;stdio.h&gt;int max(int a,int b);int min(int a,int b);void main()&#123; int a,b,m,n; printf(&quot;please input two numbers:&quot;); scanf(&quot;%d,%d&quot;,&amp;a,&amp;b); m=max(a,b); n=min(a,b); printf(&quot;最大公约数为:%d\\n最小公陪数为:%d&quot;,m,n);&#125;int max(int a,int b)&#123; int t,r; if(b&gt;a) &#123; t=a;a=b;b=t; &#125; r=a%b; while (r) &#123; a=b; b=r; r=a%b; &#125; return b;&#125;int min (int a,int b)&#123; int c; c=a*b/max(a,b); return c;&#125; 变量的储存属性注：形参属于局部变量，复合语句属于局部变量 静态存储方式—-在程序运行期间由系统给变量分配固定存储空间的存储方式，程序运行期间一直存在。只有当程序运行结束后，才释放变量占用的存储空间。变量具有全局生存期或静态生存期。 动态存储方式—-在程序运行期间给变量动态的分配存储空间的存储方式。一旦变量完成其使命，不管程序运行是否结束，立刻释放变量的存储空间。变量具有局部生存期或动态生存期。 只有自动局部变量可以定义为寄存器变量；全局变量和静态局部变量不能定义为寄存器变量。 外部变量与局部变量同名，则外部变量被屏蔽 应尽量少使用全局变量，因为：全局变量在程序全部执行过程中占用存储单元降低了函数的通用性、可靠性，可移植性降低程序清晰性，容易出错 在全局变量的作用范围之外，需要使用该全局变量，则必须用关键字extern扩展全局变量的作用域","categories":[],"tags":[]},{"title":"c语言学习笔记","slug":"c语言学习笔记","date":"2021-04-03T08:11:09.000Z","updated":"2021-04-18T08:30:44.519Z","comments":true,"path":"2021/04/03/c语言学习笔记/","link":"","permalink":"http://example.com/2021/04/03/c%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","excerpt":"利用/，%运算，取出任一个数X的个，百，千，万位数 取个位：x%10 取十位 ：x/10%10 取百位 ：x/100%10 取千位 ：x/1000%10 取万位 ：x/10000%10","text":"利用/，%运算，取出任一个数X的个，百，千，万位数 取个位：x%10 取十位 ：x/10%10 取百位 ：x/100%10 取千位 ：x/1000%10 取万位 ：x/10000%10 交换俩个数的值123456# include &lt;stdio.h&gt;void main()&#123; int a,b,t; a=2;b=3; t=a;a=b;b=t;&#125; 数学函数的使用 c标准函数 功能 cos(x) 求cos(x)的值 sin(x) 求sin(x)的值 fabs(x) 求x的绝对值 exp(x) 求e^x的绝对值 log(x) 求ln(x) 自增自减于运算符 表达式 步骤1 步骤2 ++i i=i+1 表达式的值=i i++ 表达式的值=i i=i+ m=(++i)((++i)的值为i+1)m=(i++)((i++)的值为i) 注:自增，自减运算符的操作符：变量(5++,(a+1)++都是错的) 优先级和结合方向 复合赋值运算符 x*=2+3相当于x=x *(2 + 3) 注：右操作数必须作为一个整体，先与变量的原有值进行计算，结果更新新变量的值 printf函数格式控制符的综合应用 数据进行对齐的方法 “\\t” 例：printf(&quot;房型\\t房价\\n&quot;) 或者用%-md 格式化输入函数 scanf(“%d,%d”,&amp;a,&amp;b)正确的输入格式：10，345 scanf(“a=%d,b=%d”,&amp;a,&amp;b)正确的输入格式：a=10，b=345注：scanf(“%d%d\\n”,&amp;a,&amp;b);这种是错的，不要进行换行 分数输入的案例1234567891011121314# include &lt;stdio.h&gt;void main()&#123; int n,m,i,j; float x; printf(&quot;请输入线索\\n向北走的路&quot;); scanf(&quot;%f&quot;,&amp;x); printf(&quot;再向东走(n/m):&quot;); scanf(&quot;%d/%d&quot;,&amp;n,&amp;m); printf(&quot;最后向北走(i/j):&quot;); scanf(&quot;%d/%d&quot;,&amp;i,&amp;j); printf(&quot;\\n请按以下路线行走\\n向北走%.2f\\n&quot;,x); printf(&quot;再向东走：%.2f米\\n&quot;,x*n/m); printf(&quot;最后向北走：%.2f米\\n&quot;,x*i/j);&#125; 数据截取 %lf：输入double类型的格式控制符 %md: 截取m列数据作为输入 %*md：跳过m列数据，不输入 例 ：身份证信息的获取 1234567#include &lt;stdio.h&gt;void main()&#123; int x,y,z; printf(&quot;请输入您的身份证号:\\n&quot;); scanf(&quot;%*6d%4d%2d%2d%*4d&quot;,&amp;x,&amp;y,&amp;z); printf(&quot;您的出生日期为%d年%d月%d日\\n&quot;,x,y,z);&#125; 逻辑表达式优先级优先级从高到底：！—&gt; &amp;&amp; —&gt; || 结合性 左结合：&amp;&amp;，|| 右结合：！ （混合预算中的优先级：从高到低算术运算符—&gt;关系运算符—&gt;赋值运算符） 逻辑表达式的短路计算（重要） e1 &amp;&amp; e2,如果e2为0，无须计算e2,e2将会被短路 e1 || e2,如果e1为非0，无须计算e2，e2被短路 if语句if（i==3）（对的）判断一个数是否为回文数1234567891011121314# include &lt;stdio.h&gt;void main()&#123;int x,a1,a2,a3,a4;printf(&quot;请输入一个五位数&quot;);scanf(&quot;%d&quot;,&amp;x);a1=x/10000%10;a2=x/1000%10;a3=x/10%10;a4=x%10;if(a1==a4&amp;&amp;a2==a3) printf(&quot;%d是回文数\\n&quot;,x);else printf(&quot;%d不是回文数\\n&quot;,x);&#125; else的配对问题 else与其前面最近的”未配对的if”进行匹配 判断否位闰年12345678910111213 #include &lt;stdio.h&gt;void main()&#123;int x,flag;printf(&quot;请输入年份：\\n&quot;); scanf(&quot;%d&quot;,&amp;x);if(x%4==0&amp;&amp;x%100!=0||x%400==0) flag=1;else flag=0;if(flag==1) printf(&quot;%d是闰年\\n&quot;,x);else printf(&quot;%d不是闰年\\n&quot;,x); switch case起标号作用，每个case后面的常量表达式的值各不相同 根据表达式转向不同的case标号位置，执行相应的语句序列 遇到break，退出switch语句 案例 1234567891011121314151617181920212223242526272829#include &lt;stdio.h&gt;void main()&#123; int year,month,day; int total = 0; scanf(&quot;%d,%d,%d&quot;,&amp;month,&amp;day,&amp;year); switch(month)&#123; case 12: total += 30; case 11: total += 31; case 10: total +=30; case 9: total +=31; case 8: total +=31; case 7: total +=30; case 6: total +=31; case 5: total +=30; case 4: total +=31; case 3: &#123; if(year % 4 == 0 &amp;&amp; (year % 100 != 0 || year % 400 == 0)) total+=29; else total+=28; &#125; case 2: total += 31; case 1: total += day; &#125; printf(&quot;这是今年的第%d天&quot;,total)&#125; 每个分支的语句序列不使用break语句，巧妙进行累加计算 小结 在switch语句中合理使用break,能表达不同执行流程 能使用switch的场合也可使用if语句 在使用if的地方使用switch，要看是否满足switch语句中表达式的条件 for循环 例：找符合要求的数 1234567891011121314151617# include &lt;stdio.h&gt;void main()&#123; int i,x,a,c; int count=0; for(i=100;i&lt;=999;i++)&#123; a=i/100%10; c=i%10; x=a+c; if(x==9)&#123; printf(&quot;%7d&quot;,i); count++; if(count%8==0)&#123; printf(&quot;\\n&quot;); &#125; &#125; &#125; &#125; 错误写法 小结 在给定范围的整数中找到符合要求的数，可以用for循环来实现 “每行n个”——用变量count计数 “每个数据之间有一定的距离”——用%md来进行实现 易错案列","categories":[],"tags":[]},{"title":"数组","slug":"数组","date":"2021-03-28T13:50:22.000Z","updated":"2021-03-28T14:33:10.322Z","comments":true,"path":"2021/03/28/数组/","link":"","permalink":"http://example.com/2021/03/28/%E6%95%B0%E7%BB%84/","excerpt":"数组的概念数组是指一组数据的集合，其中的每个数据被称作元素，在数组中可以存放任意类型的元素。数组是一种将一组数据存储在单个变量名下的优雅方式。","text":"数组的概念数组是指一组数据的集合，其中的每个数据被称作元素，在数组中可以存放任意类型的元素。数组是一种将一组数据存储在单个变量名下的优雅方式。 创建数组利用new创建数组12var 数组名 = new Array();var arr = new Array(); 利用数组字面量创建数组1var 数组名 = [&#x27;第一个数组元素&#x27;，&#x27;第二个数组元素&#x27;，&#x27;‘第三个数组元素&#x27;] 数组的字面量是方括号 [] 声明数组并赋值称为数组的初始化 这种字面量方式也是我们以后最多使用的方式 获取数组的元素123var arr = [1,2,3,];alert (arr[1])// 获取数组里的第二个元素 遍历数组案例11234var arr = [1,2,3,4];for(i = 0;i &lt; arr.length;i++)&#123; console.log(arr[i]);&#125; 案例2(数组的最大值)12345678var arr = [1,3,44,67,12,89];var max = arr[0];for(var i = 0;i &lt; arr.length; i++)&#123; if(arr[i] &gt; max)&#123; max = arr[i]; &#125;&#125;console.log(max); 数组中新增元素 修改length长度 修改数组索引 冒泡定律1234567891011var arr = [5,4,3,2,1];for (var i = 0; i &lt; arr.length; i++)&#123; for (var j = 0;j &lt;arr.length - i - 1;j++)&#123; if(arr[j]&gt;arr[j+1])&#123; var temp = arr[j]; arr[j] = arr[j+1]; arr [j+1] = temp; &#125; &#125;&#125;console.log(arr)","categories":[],"tags":[]},{"title":"循环笔记","slug":"循环","date":"2021-03-21T04:00:17.000Z","updated":"2021-04-03T08:11:42.590Z","comments":true,"path":"2021/03/21/循环/","link":"","permalink":"http://example.com/2021/03/21/%E5%BE%AA%E7%8E%AF/","excerpt":"循环目的重复执行某些语句","text":"循环目的重复执行某些语句 循环类型 for循环 while循环 do…while循环 for循环语法结构123for（初始化变量;条件表达式;操作表达式）&#123; //循环语句&#125; 执行过程 初始化变量，初始化操作在整个 for 循环只会执行一次。 执行条件表达式，如果为true，则执行循环体语句，否则退出循环，循环结束。 执行操作表达式，此时第一轮结束。 第二轮开始，直接去执行条件表达式（不再初始化变量），如果为 true ，则去执行循环体语句，否则退出循环。 继续执行操作表达式，第二轮结束。 后续跟第二轮一致，直至条件表达式为假，结束整个 for 循环。 自我总结for循环重复相同的代码，不相同的代码，某些相同操作都是计数器i有关 双重for循环语法结构12345for (外循环的初始; 外循环的条件; 外循环的操作表达式) &#123; for (内循环的初始; 内循环的条件; 内循环的操作表达式) &#123; 需执行的代码; &#125;&#125; 要点 内层循环可以看做外层循环的语句 内层循环执行的顺序也要遵循for循环的执行顺序 外层循环执行一次，内层循环要执行全部 案例 打印五行五列 打印正三角fi 打印倒三角 while循环结构式123while (条件表达式) &#123; // 循环体代码 &#125; 执行过程 先执行条件表达式，如果结果为 true，则执行循环体代码；如果为 false，则退出循环，执行后面代码 执行循环体代码 循环体代码执行完毕后，程序会继续判断执行条件表达式，如条件仍为true，则会继续执行循环体，直到循环条件为 false 时，整个循环过程才会结束 do while循环 do { // 循环体代码 - 条件表达式为 true 时重复执行循环体代码} while(条件表达式); 执行思路 先执行一次循环代码 在执行表达式，如果true,则继续执行循环体代码。如果false则退出后面循环 continue和breakcontinue用于立即跳出本次循环，继续下一次循环 braeak立即跳出整个循环","categories":[],"tags":[]},{"title":"","slug":"hello-world","date":"2021-01-02T07:16:27.177Z","updated":"2021-04-06T14:35:11.078Z","comments":true,"path":"2021/01/02/hello-world/","link":"","permalink":"http://example.com/2021/01/02/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[]}